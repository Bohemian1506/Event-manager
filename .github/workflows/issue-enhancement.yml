name: Claude Code Issue Enhancement - EventPay Manager

on:
  issues:
    types: [labeled]

jobs:
  enhance-issue:
    # 'needs-details' ラベルが付与された場合のみ実行
    if: |
      github.event.label.name == 'needs-details' &&
      github.event.action == 'labeled'
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Add Claude Code mention to issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Issue番号を取得
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # Claude Codeにメンションしてissue詳細化を依頼
          gh issue comment $ISSUE_NUMBER --body "@claude このIssueを EventPay Manager プロジェクト用に詳細化してください。

          ## 詳細化の方針
          
          1. **技術的詳細の追加**
             - 実装に必要な技術要件を具体化
             - 使用する技術スタック（Ruby 3.3.6, Rails 8.0.0, PostgreSQL 15等）との整合性確認
             - 既存アーキテクチャとの関連性を明記
          
          2. **実装方針の提案**
             - 段階的な実装ステップを提示
             - 各ステップの技術的詳細を説明
             - 初学者にも理解できる説明を心がける
          
          3. **受け入れ基準の明確化**
             - 機能完成の定義を具体的に記載
             - テスト可能な形式で記述
             - UI/UXの観点も含める
          
          4. **関連情報の追加**
             - 影響を受ける既存機能の洗い出し
             - 必要なデータベース変更の特定
             - セキュリティ考慮事項の記載
          
          5. **ラベルとマイルストーンの提案**
             - 適切なPhaseラベル（phase-2, phase-3, phase-4）
             - 機能カテゴリラベル（auth, ui/ux, api, payment等）
             - 優先度ラベル（priority-high, priority-medium, priority-low）
          
          ## Issue更新フォーマット
          
          以下の構造でIssue本文を更新してください：
          
          \`\`\`markdown
          ## 📋 概要
          [元の説明を基に、より詳細な説明を記載]
          
          ## 🎯 目的・背景
          [この機能/修正が必要な理由と期待される価値]
          
          ## 📐 技術的詳細
          
          ### 実装方針
          [技術的なアプローチと設計判断]
          
          ### 使用技術
          - [関連する技術スタックと理由]
          
          ### データベース変更
          - [必要なマイグレーションやスキーマ変更]
          
          ## 📝 実装ステップ
          1. [ ] [具体的なステップ1]
          2. [ ] [具体的なステップ2]
          3. [ ] [具体的なステップ3]
          
          ## ✅ 受け入れ基準
          - [ ] [機能が完成したと言える具体的な条件1]
          - [ ] [機能が完成したと言える具体的な条件2]
          - [ ] [機能が完成したと言える具体的な条件3]
          
          ## 🔍 考慮事項
          
          ### セキュリティ
          - [認証・認可・データ保護に関する考慮点]
          
          ### パフォーマンス
          - [大量データや負荷に関する考慮点]
          
          ### UI/UX
          - [ユーザビリティに関する考慮点]
          
          ## 🔗 関連情報
          - 関連Issue: #[番号]
          - 関連PR: #[番号]
          - 参考ドキュメント: [リンク]
          
          ## 📊 推奨設定
          - **Phase**: phase-[2/3/4]
          - **カテゴリ**: [auth/ui/api/payment/notification等]
          - **優先度**: priority-[high/medium/low]
          - **見積もり**: [S/M/L/XL]
          
          ---
          🤖 このIssueは Claude Code により自動的に詳細化されました
          \`\`\`
          
          ## 注意事項
          - EventPay Managerは初学者向けプロジェクトなので、技術的説明は分かりやすく
          - Rails 8.0の新機能（標準認証、Solid Queue等）の活用を考慮
          - Docker環境での動作を前提とした実装方針
          - 既存のコーディング規約（docs/setup/development-rules.md）との整合性
          
          \`gh issue edit\` コマンドを使用してIssue本文を上記フォーマットで更新し、適切なラベルも追加してください。"