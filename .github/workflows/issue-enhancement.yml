name: Claude Code Issue Enhancement - EventPay Manager

on:
  issues:
    types: [labeled]

jobs:
  enhance-issue:
    # 'needs-details' ラベルが付与された場合のみ実行
    if: |
      github.event.label.name == 'needs-details' &&
      github.event.action == 'labeled'
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Enhance Issue with Claude API
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          # Create Node.js script for Claude API call
          cat > enhance_issue.js << 'EOF'
          const https = require('https');
          const { execSync } = require('child_process');
          
          const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
          const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
          const ISSUE_NUMBER = process.env.ISSUE_NUMBER;
          const ISSUE_TITLE = process.env.ISSUE_TITLE;
          const ISSUE_BODY = process.env.ISSUE_BODY;
          
          // Claude API request payload
          const requestData = JSON.stringify({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 4000,
            temperature: 0.3,
            messages: [{
              role: "user",
              content: `あなたは EventPay Manager プロジェクトのIssue詳細化アシスタントです。
          以下のIssueを開発に必要な詳細情報を含む完全なIssue本文に更新してください。
          
          【元のIssue情報】
          タイトル: ${ISSUE_TITLE}
          内容: ${ISSUE_BODY}
          
          【技術スタック】
          - Ruby 3.3.6 + Rails 8.0.0
          - PostgreSQL 15
          - Bootstrap 5 + Stimulus
          - Docker環境
          - ViewComponent
          - SendGrid (メール)
          
          【詳細化要件】
          以下の構造で詳細なIssue本文を作成してください：
          
          ## 📋 概要
          [元の説明を基に、より詳細な説明を記載]
          
          ## 🎯 目的・背景  
          [この機能/修正が必要な理由と期待される価値]
          
          ## 📐 技術的詳細
          
          ### 実装方針
          [技術的なアプローチと設計判断]
          
          ### 使用技術
          - [関連する技術スタックと理由]
          
          ### データベース変更
          - [必要なマイグレーションやスキーマ変更]
          
          ## 📝 実装ステップ
          1. [ ] [具体的なステップ1]
          2. [ ] [具体的なステップ2]
          3. [ ] [具体的なステップ3]
          
          ## ✅ 受け入れ基準
          - [ ] [機能が完成したと言える具体的な条件1]
          - [ ] [機能が完成したと言える具体的な条件2]
          - [ ] [機能が完成したと言える具体的な条件3]
          
          ## 🔍 考慮事項
          
          ### セキュリティ
          - [認証・認可・データ保護に関する考慮点]
          
          ### パフォーマンス
          - [大量データや負荷に関する考慮点]
          
          ### UI/UX
          - [ユーザビリティに関する考慮点]
          
          ## 🔗 関連情報
          - 関連Issue: #[番号があれば]
          - 関連PR: #[番号があれば]
          - 参考ドキュメント: [リンクがあれば]
          
          ## 📊 推奨設定
          - **Phase**: phase-[2/3/4]
          - **カテゴリ**: [auth/ui/api/payment/notification等]
          - **優先度**: priority-[high/medium/low]  
          - **見積もり**: [S/M/L/XL]
          
          ---
          🤖 このIssueは Claude Code により自動的に詳細化されました
          
          【注意事項】
          - EventPay Managerは初学者向けプロジェクトなので、技術的説明は分かりやすく
          - Rails 8.0の新機能（標準認証、Solid Queue等）の活用を考慮
          - Docker環境での動作を前提とした実装方針
          - 既存のコーディング規約との整合性を重視
          
          上記フォーマットで、元のIssue内容を詳細化した完全なmarkdown本文を出力してください。`
            }]
          });
          
          // Claude API options
          const options = {
            hostname: 'api.anthropic.com',
            port: 443,
            path: '/v1/messages',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': ANTHROPIC_API_KEY,
              'anthropic-version': '2023-06-01',
              'Content-Length': Buffer.byteLength(requestData)
            }
          };
          
          // Make API request to Claude
          const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
              data += chunk;
            });
            
            res.on('end', () => {
              try {
                const response = JSON.parse(data);
                
                if (response.content && response.content[0] && response.content[0].text) {
                  const enhancedBody = response.content[0].text;
                  
                  // Update GitHub Issue using gh CLI
                  const escapedBody = enhancedBody.replace(/"/g, '\\"').replace(/`/g, '\\`');
                  const updateCommand = `gh issue edit ${ISSUE_NUMBER} --body "${escapedBody}"`;
                  
                  try {
                    execSync(updateCommand, { 
                      env: { ...process.env, GITHUB_TOKEN },
                      stdio: 'inherit'
                    });
                    console.log(`✅ Issue #${ISSUE_NUMBER} has been enhanced successfully!`);
                    
                    // Add success comment
                    const commentCommand = `gh issue comment ${ISSUE_NUMBER} --body "🤖 Issue詳細化が完了しました！\\n\\n自動的に以下が追加されました：\\n- 技術的詳細と実装方針\\n- 段階的な実装ステップ\\n- テスト可能な受け入れ基準\\n- セキュリティ・パフォーマンス考慮事項\\n- 推奨ラベルと優先度"`;
                    execSync(commentCommand, { 
                      env: { ...process.env, GITHUB_TOKEN },
                      stdio: 'inherit'
                    });
                    
                  } catch (error) {
                    console.error('Failed to update issue:', error.message);
                    process.exit(1);
                  }
                } else {
                  console.error('Invalid response from Claude API:', response);
                  process.exit(1);
                }
              } catch (error) {
                console.error('Failed to parse Claude API response:', error.message);
                console.error('Response data:', data);
                process.exit(1);
              }
            });
          });
          
          req.on('error', (error) => {
            console.error('Claude API request failed:', error.message);
            process.exit(1);
          });
          
          req.write(requestData);
          req.end();
          EOF
          
          # Execute the Node.js script
          node enhance_issue.js